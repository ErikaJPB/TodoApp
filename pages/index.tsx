import Head from "next/head";
import { Inter } from "@next/font/google";
import { AiOutlinePlus } from "react-icons/ai";
import { useState, useEffect } from "react";
import Todo from "../components/Todo";
import { db } from "../firebase";
import {
  query,
  collection,
  onSnapshot,
  doc,
  addDoc,
  deleteDoc,
  updateDoc,
} from "firebase/firestore";

const inter = Inter({ subsets: ["latin"] });

type TodoType = {
  task: string;
  id: string;
  completed: boolean;
};

export default function Home() {
  const [todos, setTodos] = useState<TodoType[]>([]);
  const [value, setValue] = useState("");

  //create todo
  const createTodo = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (value === "") {
      alert("Please enter a valid todo");
      return;
    }
    await addDoc(collection(db, "todos"), {
      text: value,
      completed: false,
    });
    setValue("");
  };

  //read todo from firebase
  useEffect(() => {
    const q = query(collection(db, "todos"));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      let todosArray: TodoType[] = [];

      querySnapshot.forEach((doc) => {
        todosArray.push({
          task: doc.data().text,
          id: doc.id,
          completed: doc.data().completed,
        });
      });
      setTodos(todosArray);
    });
    return () => unsubscribe();
  }, []);

  //update todo from firebase
  const toggleComplete = async (todo: TodoType) => {
    await updateDoc(doc(db, "todos", todo.id), {
      completed: !todo.completed,
    });
  };

  //update todo text

  const updateTodoText = async (todo: TodoType, newText: string) => {
    await updateDoc(doc(db, "todos", todo.id), {
      text: newText,
    }).then(() => {
      setTodos((prevTodos) =>
        prevTodos.map((t) => {
          if (t.id === todo.id) {
            return { ...t, task: newText };
          }
          return t;
        })
      );
    });
  };

  // delete todo

  const deleteTodo = async (id: string) => {
    await deleteDoc(doc(db, "todos", id));
    setTodos((prevTodos) => prevTodos.filter((todo) => todo.id !== id));
  };

  return (
    <div>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/headicon.jpg" />
      </Head>
      <div className="h-screen w-screen p-2 bg-gradient-to-r from-[#735d78] to-[#b392ac] ">
        <div className="bg-slate-50 max-w-[500px] w-full m-auto rounded-2xl shadow-2xl p-6 my-8  ">
          <h3 className="text-3xl font-semibold text-center text-gray-600 p-2 m-5">
            Task List
          </h3>
          <form onSubmit={createTodo} className="flex justify-between">
            <input
              className="border p-2 w-full text-xl rounded-2xl"
              type="text"
              placeholder="Add To Do"
              value={value}
              onChange={(event) => setValue(event.target.value)}
            ></input>
            <button className="border p-4 ml-2 bg-purple-200 rounded-2xl">
              <AiOutlinePlus size={30} />
            </button>
          </form>
          <div className="h-64 overflow-auto">
            <ul className="list-none">
              {todos?.map((todo) => (
                <Todo
                  key={todo.id}
                  todo={todo}
                  toggleComplete={toggleComplete}
                  deleteTodo={deleteTodo}
                  updateTodoText={updateTodoText}
                />
              ))}
            </ul>
          </div>
          {todos.length < 1 ? null : (
            <p className="text-center p-3">{`You have ${todos.length} todos`}</p>
          )}
        </div>
      </div>
    </div>
  );
}
